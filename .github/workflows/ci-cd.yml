name: CI/CD - Claim Status API

on:
  push:
    branches: [ master, develop ]
    paths:
      - 'src/**'
      - 'mocks/**'
      - 'Dockerfile'
      - '.github/workflows/ci-cd.yml'
  pull_request:
    branches: [ master ]

env:
  REGISTRY: claimsacrcna.azurecr.io
  IMAGE_NAME: claim-status-api
  RESOURCE_GROUP: claims-api-lab-rg
  BICEP_PREFIX: claims
  BICEP_ENVIRONMENT: dev

jobs:
  build:
    name: Build and Push Container Image
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v2  # Updated from v1
      with:
        login-server: ${{ env.REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ github.run_number }}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          BUILD_VERSION=${{ github.run_number }}

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v2  # Updated from v1
      with:
        login-server: ${{ env.REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}
        format: 'json'
        output: 'trivy-results.json'

    - name: Process scan results
      id: scan-results
      run: |
        # Install jq if not available
        sudo apt-get update && sudo apt-get install -y jq
        
        # Count vulnerabilities by severity
        if [ -f trivy-results.json ]; then
          HIGH_COUNT=$(cat trivy-results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length')
          CRITICAL_COUNT=$(cat trivy-results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length')
          MEDIUM_COUNT=$(cat trivy-results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length')
        else
          HIGH_COUNT=0
          CRITICAL_COUNT=0
          MEDIUM_COUNT=0
        fi
        
        echo "high-count=$HIGH_COUNT" >> $GITHUB_OUTPUT
        echo "critical-count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
        echo "medium-count=$MEDIUM_COUNT" >> $GITHUB_OUTPUT
        
        echo "### Security Scan Results 🔍" >> $GITHUB_STEP_SUMMARY
        echo "- **Critical Vulnerabilities:** $CRITICAL_COUNT" >> $GITHUB_STEP_SUMMARY
        echo "- **High Vulnerabilities:** $HIGH_COUNT" >> $GITHUB_STEP_SUMMARY
        echo "- **Medium Vulnerabilities:** $MEDIUM_COUNT" >> $GITHUB_STEP_SUMMARY
        echo "- **Image:** ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Scan Date:** $(date)" >> $GITHUB_STEP_SUMMARY

    - name: Upload scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-scan-results
        path: trivy-results.json

    - name: Security Gate
      if: github.ref == 'refs/heads/master' && steps.scan-results.outputs.critical-count > 0
      run: |
        echo "::error::Critical vulnerabilities found on master branch! Failing pipeline."
        echo "Critical vulnerabilities: ${{ steps.scan-results.outputs.critical-count }}"
        exit 1

  deploy:
    name: Deploy to Azure Container Apps
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Discover Azure Resources
      id: get-resources
      run: |
        echo "### Discovering Resources in Resource Group ###"
        
        # List all resources in the resource group for debugging
        echo "All resources in ${{ env.RESOURCE_GROUP }}:"
        az resource list -g ${{ env.RESOURCE_GROUP }} \
          --query "[].{name:name, type:type, location:location}" -o table
        
        # Find Container App (look for any containerapp in the resource group)
        CONTAINER_APP_NAME=$(az containerapp list \
          -g ${{ env.RESOURCE_GROUP }} \
          --query "[0].name" -o tsv 2>/dev/null || echo "")
        
        # Find API Management service (look for any APIM in the resource group)
        APIM_NAME=$(az apim list \
          -g ${{ env.RESOURCE_GROUP }} \
          --query "[0].name" -o tsv 2>/dev/null || echo "")
        
        # Check if Container App was found
        if [ -z "$CONTAINER_APP_NAME" ] || [ "$CONTAINER_APP_NAME" = "null" ]; then
          echo "::error::No Container App found in resource group ${{ env.RESOURCE_GROUP }}"
          echo "Please ensure you have created a Container App manually in the Azure Portal"
          echo "Available Container Apps:"
          az containerapp list -g ${{ env.RESOURCE_GROUP }} --query "[].name" -o table || echo "None found"
          exit 1
        fi
        
        # APIM is optional - warn if not found but don't fail
        if [ -z "$APIM_NAME" ] || [ "$APIM_NAME" = "null" ]; then
          echo "::warning::No API Management service found in resource group"
          echo "APIM backend update will be skipped"
          APIM_NAME=""
        fi
        
        echo "### Discovered Resources ✅" >> $GITHUB_STEP_SUMMARY
        echo "- **Container App:** $CONTAINER_APP_NAME" >> $GITHUB_STEP_SUMMARY
        if [ -n "$APIM_NAME" ]; then
          echo "- **API Management:** $APIM_NAME" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **API Management:** Not found (will skip APIM update)" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Output the resource names for subsequent steps
        echo "container-app-name=$CONTAINER_APP_NAME" >> $GITHUB_OUTPUT
        echo "apim-name=$APIM_NAME" >> $GITHUB_OUTPUT
        
        echo "Found Container App: $CONTAINER_APP_NAME"
        echo "Found APIM: $APIM_NAME"

    - name: Deploy to Azure Container Apps
      run: |
        echo "Updating Container App ${{ steps.get-resources.outputs.container-app-name }} with new image..."
        az containerapp update \
          --name ${{ steps.get-resources.outputs.container-app-name }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.run_number }} \
          --set-env-vars \
            NODE_ENV=production \
            PORT=3000 \
            BUILD_VERSION=${{ github.run_number }}

    - name: Update APIM Backend Configuration
      if: steps.get-resources.outputs.apim-name != ''
      run: |
        # Get Container App FQDN
        FQDN=$(az containerapp show \
          --name ${{ steps.get-resources.outputs.container-app-name }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query properties.configuration.ingress.fqdn -o tsv)
        
        if [ -z "$FQDN" ]; then
          echo "::error::Failed to get Container App FQDN"
          exit 1
        fi
        
        echo "Container App FQDN: $FQDN"
        echo "APIM Service: ${{ steps.get-resources.outputs.apim-name }}"
        
        # Update or create APIM backend
        echo "Updating APIM backend configuration..."
        az apim backend update \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --service-name ${{ steps.get-resources.outputs.apim-name }} \
          --backend-id claim-status-backend \
          --url "https://$FQDN" \
          --protocol http || {
            echo "Backend doesn't exist, creating new one..."
            az apim backend create \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --service-name ${{ steps.get-resources.outputs.apim-name }} \
              --backend-id claim-status-backend \
              --url "https://$FQDN" \
              --protocol http \
              --title "Claim Status API Backend" \
              --description "Backend for Claim Status API Container App" || {
                echo "::warning::Failed to create/update APIM backend"
              }
          }
        
        echo "### Deployment Complete ✅" >> $GITHUB_STEP_SUMMARY
        echo "- **Container App URL:** https://$FQDN" >> $GITHUB_STEP_SUMMARY
        echo "- **APIM Backend:** Updated/Created" >> $GITHUB_STEP_SUMMARY
        echo "- **Image Version:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY

    - name: Deploy APIM Policies and APIs
      if: steps.get-resources.outputs.apim-name != ''
      run: |
        echo "### Deploying APIM Configuration ###"
        
        # Check if API definition exists in the repo
        if [ -f "apim/api-definition.json" ]; then
          echo "Deploying API definition..."
          
          # Import API definition (this will create or update the API)
          az apim api import \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --service-name ${{ steps.get-resources.outputs.apim-name }} \
            --api-id claim-status-api \
            --path "/api/claims" \
            --display-name "Claim Status API" \
            --specification-format OpenApi3Json \
            --specification-path "apim/api-definition.json" || {
              echo "::warning::Failed to import API definition"
            }
        else
          echo "::warning::No API definition found at apim/api-definition.json"
        fi
        
        # Apply global policy if exists
        if [ -f "apim/global-policy.xml" ]; then
          echo "Applying global policy..."
          az apim policy set \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --service-name ${{ steps.get-resources.outputs.apim-name }} \
            --policy-format xml \
            --value @apim/global-policy.xml || {
              echo "::warning::Failed to apply global policy"
            }
        fi
        
        # Apply API-specific policies
        if [ -f "apim/get-claim-policy.xml" ]; then
          echo "Applying GET claims policy..."
          az apim api operation policy set \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --service-name ${{ steps.get-resources.outputs.apim-name }} \
            --api-id claim-status-api \
            --operation-id get-claim \
            --policy-format xml \
            --value @apim/get-claim-policy.xml || {
              echo "::warning::Failed to apply GET claims policy"
            }
        fi
        
        if [ -f "apim/post-summarize-policy.xml" ]; then
          echo "Applying POST summarize policy..."
          az apim api operation policy set \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --service-name ${{ steps.get-resources.outputs.apim-name }} \
            --api-id claim-status-api \
            --operation-id post-summarize \
            --policy-format xml \
            --value @apim/post-summarize-policy.xml || {
              echo "::warning::Failed to apply POST summarize policy"
            }
        fi
        
        # Before applying policies, list available operations
        OPERATIONS=$(az apim api operation list \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --service-name ${{ steps.get-resources.outputs.apim-name }} \
          --api-id claim-status-api \
          --query "[].name" -o tsv 2>/dev/null || echo "")

        echo "Available operations: $OPERATIONS"
        
        echo "### APIM Configuration Complete ✅" >> $GITHUB_STEP_SUMMARY

    - name: Display Deployment Summary (No APIM)
      if: steps.get-resources.outputs.apim-name == ''
      run: |
        # Get Container App FQDN
        FQDN=$(az containerapp show \
          --name ${{ steps.get-resources.outputs.container-app-name }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query properties.configuration.ingress.fqdn -o tsv)
        
        echo "### Deployment Complete ✅" >> $GITHUB_STEP_SUMMARY
        echo "- **Container App URL:** https://$FQDN" >> $GITHUB_STEP_SUMMARY
        echo "- **Image Version:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Note:** APIM backend update skipped (no APIM service found)" >> $GITHUB_STEP_SUMMARY

    - name: Rollback on Failure
      if: failure()
      run: |
        echo "Deployment failed, considering rollback to previous revision"
        # Get previous revision and rollback logic here

    - name: Azure Logout
      if: always()
      run: az logout